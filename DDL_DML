-- DDL – Linguagem de Definição de Dados
CREATE / ALTER / DROP / TRUNCATE
-- DML - Linguagem de Modelagem de Dados
SELECT / INSERT / UPDATE / DELETE e MERGE que é uma operação que combinada o (INSERT, UPDATE e DELETE)

-- Criação Tabela + campo com DEFAULT + Index Primary Key
CREATE TABLE [dbo].[Produto](
	[id_prod] [int] NOT NULL,
	[nm_prod] [varchar](100) NOT NULL,
	[id_cat_prod] [int] NOT NULL,
	[dt_cad_prod] [datetime] NOT NULL CONSTRAINT [DF_Produto_dt_cad_prod] DEFAULT GETDATE(),
  CONSTRAINT [IX_Produto_id_prod] PRIMARY KEY CLUSTERED 
  (
	  [id_prod] ASC
  ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Este Alter é para adicionar um Campo DEFAULT na Tabela, caso ela seja adicionado após a criação e não especificado na coluna, como exemplo anterior.
ALTER TABLE [dbo].[Produto] ADD  CONSTRAINT [DF_Produto_dt_cad_prod]  DEFAULT (getdate()) FOR [dt_cad_prod]
GO

-- Criando uma 2ª Tabela, Definindo o Id da Tabela Pai como Clustered e após o Id da tabela filha Index Nonclustered
CREATE TABLE [dbo].[ListaProduto] (
	[id_listprod] [int] NOT NULL,
	[id_prod] [int] NOT NULL,
	[qtd] [int] NOT NULL,
	CONSTRAINT [IX_ListaProduto_id_prod] PRIMARY KEY CLUSTERED
	( [id_prod] ASC )
	WITH ( PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON,
	       ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Criando Index Nonclustered para o campo Id da tabela Filho
CREATE NONCLUSTERED INDEX [IX_ListaProduto_id_listprod] ON [dbo].[ListaProduto]
(
	[id_listprod] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

-- Exclusão da Tabela
DROP TABLE [dbo].[Produto]
GO

-- Criado um FileGroup que é uma Orgazinação Logica do SQL Server
ALTER DATABASE [TestDB] ADD FILEGROUP [INDEX]
GO

--Associar esse FileGroup a um arquivo Fisico do Banco de Dados
ALTER DATABASE [TestDB] ADD FILE ( NAME = N'INDEX', FILENAME = N'C:\SQLSERVER2019\Microsoft SQL Server\MSSQL15.MSSQLSERVER_01\MSSQL\DATA\BD\Index.ndf' , SIZE = 8192KB , FILEGROWTH = 65536KB ) TO FILEGROUP [INDEX]
GO

-- Procedure com parametro entrada para Interir Dados na Tabela
ALTER PROCEDURE dbo.add_produto
	@nm_prod VARCHAR(100),
	@id_cat_prod INT
AS
	SET NOCOUNT ON;

	INSERT INTO [dbo].[Produto] (nm_prod, id_cat_prod) VALUES (@nm_prod, @id_cat_prod);
GO

-- Procedure para pesquisar produtos na tabela
CREATE PROCEDURE dbo.find_produto
	@nm_prod VARCHAR(100)
AS
	SET NOCOUNT ON;
	select * from dbo.Produto where nm_prod = @nm_prod;
GO

-- Procedure para Excluir cadastro de Produto
CREATE PROCEDURE dbo.del_produto
	@id_prod INT
AS
	SET NOCOUNT ON;
	DELETE FROM dbo.Produto where id_prod = @id_prod;
GO

-- Procedure para Atualizar um Produto
CREATE PROCEDURE dbo.update_prod
	@id_prod INT,
	@nm_prod VARCHAR(100)
AS
	SET NOCOUNT ON;
	UPDATE dbo.Produto set nm_prod = @nm_prod where id_prod = @id_prod;
GO

--Procedure para pesquisar, com um par de entrada e um par de saída.
CREATE PROCEDURE dbo.sp_find_produto_out
	@id_prod INT,
	@nm_prod VARCHAR(100) OUTPUT
AS
	BEGIN
		SELECT @nm_prod = nm_prod from dbo.Produto WHERE id_prod = @id_prod;
	END;

-- Declarando uma variável para receber o valor OUTPUT
DECLARE @nome VARCHAR(100);
EXECUTE dbo.sp_find_produto_out @id_prod = 2, @nm_prod = @nome OUTPUT;
SELECT @nome AS NOME;

-- VIEW visualização da tabela de Produtos
CREATE VIEW dbo.view_produtos
AS
select * from dbo.Produto;
GO

-- VIEW MATERIALIZED
CREATE MATERIALIZED VIEW dbo.materialized_view_produtos 
AS
SELECT id_prod, nm_prod FROM dbo.Produto
GO

REFRESH MATERIALIZED VIEW EmployeeConfid2;

-- Habilitando nivel de sua sessão transações implicitas
SET IMPLICIT_TRANSACTIONS ON
GO

-- Função para passar um parâmetro de verificar se ele Existe!
ALTER FUNCTION dbo.fn_produto (@id INT)
RETURNS VARCHAR(100)
AS
BEGIN
	DECLARE @msg VARCHAR(100);

	SELECT @msg = nm_prod FROM dbo.Produto WHERE id_prod = @id;

	IF @msg IS NOT NULL
		SET @msg = ('Produto: ' + @msg + ' Existe!');
	ELSE
		SET @msg = ('Não foi Encontrado!');

	RETURN(@msg);
END;

select dbo.fn_produto(1);

-- Função para Retornar os resultados de uma tabela
CREATE FUNCTION dbo.fn_table_produto ()
RETURNS TABLE
AS
RETURN (SELECT * FROM dbo.Produto);
GO

select * from dbo.fn_table_produto ();

-- Create Table a partir de outra tabela - SQL Data Warehouse do Azure
CREATE TABLE dbo.Produtos2 AS SELECT * FROM dbo.Produto;

-- Criando uma tabela temporária com base na tabela de Produto, consultando e após aplicando um insert
select * INTO #tab_temp_produto from dbo.produto;
select * from #tab_temp_produto;
insert into #tab_temp_produto select nm_prod, id_cat_prod, dt_cad_prod from dbo.Produto;

-- Criando a tabela temporaria manualmente
-- Quando a tabela criada tiver 2 (##), ela é Global
CREATE TABLE #TEMP_Produto(
	[id_prod] [int] IDENTITY(1,1) NOT NULL,
	[nm_prod] [varchar](100) NOT NULL,
	[id_cat_prod] [int] NOT NULL,
	[dt_cad_prod] [datetime] NOT NULL
) ON [PRIMARY]
GO

--Create Table a partir de outra tabela -- SQL Server
SELECT * INTO dbo.Produtos2 FROM dbo.Produto;

-- Adicionado Index Clustered nesta tabela dbo.Produtos2
ALTER TABLE [dbo].[Produtos2] ADD  CONSTRAINT [IX_Produto_id_prod2] PRIMARY KEY CLUSTERED 
(
	[id_prod] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO

-- Adicionado Default no campo dt_cad_prod tabela dbo.Produtos2
ALTER TABLE [dbo].[Produtos2] ADD  CONSTRAINT [DF_Produtos2_dt_cad_prod]  DEFAULT (getdate()) FOR [dt_cad_prod]
GO

-- Adicionado campo na tabela dbo.Produtos2
ALTER TABLE dbo.Produtos2 ADD Operacao CHAR(3);

-- Criado Trigger para qualquer operação depois de Inserir, Atualizar e Excluír, é inserido em outra tabela.
CREATE TRIGGER dbo.tg_produto ON dbo.Produto
AFTER INSERT, UPDATE, DELETE
AS
	BEGIN
		SET NOCOUNT ON;
		IF EXISTS (SELECT * FROM inserted)
			INSERT INTO dbo.Produtos2 (nm_prod, id_cat_prod, Operacao)
			SELECT a.nm_prod, a.id_cat_prod, 'INS' FROM INSERTED AS a

		ELSE
			INSERT INTO dbo.Produtos2 (nm_prod, id_cat_prod, Operacao)
			SELECT d.nm_prod, d.id_cat_prod, 'DEL' FROM DELETED AS d
	END
GO

-- Exemplo abaixo utiliza a declaração de um curso para imprimir todos cadastros de produtos
SET NOCOUNT ON;
DECLARE
	@id_prod int,
	@nm_prod VARCHAR(200);

DECLARE cursor_produtos CURSOR  
    FOR SELECT id_prod, nm_prod FROM dbo.Produto
OPEN cursor_produtos

FETCH NEXT FROM cursor_produtos INTO @id_prod, @nm_prod;

WHILE @@FETCH_STATUS = 0
	BEGIN
		PRINT 'ID - ' + CONVERT(varchar(5) ,@id_prod) + ', ' + 'NOME - ' + @nm_prod
		FETCH NEXT FROM cursor_produtos INTO @id_prod, @nm_prod;
	END;
CLOSE cursor_produtos;
DEALLOCATE cursor_produtos;

-- Criado a tabela Produto2 com base na tabela Produto, incluindo todos seus registros, são identicas
select * into dbo.Produto2 from dbo.Produto;

--Inserido um registro na tabela Produto2, para ficar diferente da tabela Produto
-- E ser aplicado um MERGE
insert into dbo.Produto2 (nm_prod, id_cat_prod, dt_cad_prod) values ('FACA', 1, GETDATE());

-- Script para aplicar merge na tabela Produto, Pegando o que tem de registro novo ou alterado da tabela produto2.
BEGIN  
    SET NOCOUNT ON;  
    MERGE dbo.Produto AS a  
    USING dbo.Produto2 AS b  
    ON (a.id_prod = b.id_prod)  
    WHEN MATCHED THEN
        UPDATE SET a.nm_prod = b.nm_prod,
				   a.id_cat_prod = b.id_cat_prod
    WHEN NOT MATCHED THEN  
        INSERT (nm_prod, id_cat_prod)  
        VALUES (b.nm_prod, b.id_cat_prod);
END;

-- Criado o Esquema user_01 e o user_01 é o proprietário dele
-- Agora pode ser criado vários objetos dentro deste esquema, como tabelas, procedures, functios, triggers de demais objetos do banco de dados
USE [TestDB]
GO
CREATE SCHEMA [user_01] AUTHORIZATION [user_01]
GO

-- Criado a mesma tabela Produto do esquema dbo, porém agora dentro do esquema user_01
--É permitido tabelas com nomes iguais, porém em esquemas distintos
CREATE TABLE [user_01].[Produto](
	[id_prod] [int] IDENTITY(1,1) NOT NULL,
	[nm_prod] [varchar](100) NOT NULL,
	[id_cat_prod] [int] NOT NULL,
	[dt_cad_prod] [datetime] NOT NULL,
 CONSTRAINT [IX_Produto_id_prod] PRIMARY KEY CLUSTERED 
(
	[id_prod] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
commit
ALTER TABLE [user_01].[Produto] ADD  CONSTRAINT [DF_Produto_dt_cad_prod]  DEFAULT (getdate()) FOR [dt_cad_prod]
GO

--




