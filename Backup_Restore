-- SQl Server Possui os Modos de Recuperação
COMPLETO - Registra todos as Transações no arquivo de LOG, sendo necessário realizar backup de LOG.
SIMPLES - Registrar as transações no arquivo de LOG, porém são truncadas automaticamente quando o arquivo enche ou sofre checkpoint
BULK-LOGGED - Registra as transações no arquivo de LO e é necessário fazer backup de log também.

-- Tipos de Backup
FULL - Backup Completo
INCREMENTAL - Vários arquivos de backup,com alterações apenas feitas após ultimo backup.
DIFERENCIAL - Backup cumulativo, com todas as alterações feitas desde o último backup FULL realizado.
LOG - Backup de LOG contendo todas os registros das transações.

--Set o Banco de Dados em Modo de Recuperação FULL
ALTER DATABASE TestDB SET RECOVERY FULL;

--Set Banco de Dados em Modo de Recuperação SIMPLES
ALTER DATABASE [TestDB] SET RECOVERY SIMPLE WITH NO_WAIT
GO

--Set Banco de Dados em Modo de Recuperação Bulk Logged
ALTER DATABASE [TestDB] SET RECOVERY BULK_LOGGED WITH NO_WAIT
GO

-- Norecovery - Restaura o arquivo de dados ou log do Banco, e o deixa não recuperado e não online para demais arquivos serem restaurados ainda.
-- Standby - Restaura o arquivo de dados ou log do Banco e deixa ele em Espera e Somente leitura para restaurar mais arquivos.

--###################################################
-- SIMULANDO BACKUP FULL / INSERINDO REGISTROS AO BANCO / BACKUP DE LOG / DROP DATABASE / RESTAURADO BACKUP DATABASE FULL / RESTAURADO BACKUP LOG 
-- Criado uma tabela Produto no Banco de Dados (TestDB)
CREATE TABLE [dbo].[Produto](
	[id_prod] [int] IDENTITY(1,1) NOT NULL,
	[nm_prod] [varchar](100) NOT NULL,
	[id_cat_prod] [int] NOT NULL,
	[dt_cad_prod] [datetime] NOT NULL,
 CONSTRAINT [IX_Produto_id_prod] PRIMARY KEY CLUSTERED 
(
	[id_prod] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Inserindo Registros na Tabela Produto
INSERT INTO dbo.Produto (nm_prod, id_cat_prod) VALUES ('Cadastro 01', 1);
INSERT INTO dbo.Produto (nm_prod, id_cat_prod) VALUES ('Cadastro 02', 1);
INSERT INTO dbo.Produto (nm_prod, id_cat_prod) VALUES ('Cadastro 03', 1);
INSERT INTO dbo.Produto (nm_prod, id_cat_prod) VALUES ('Cadastro 04', 1);
INSERT INTO dbo.Produto (nm_prod, id_cat_prod) VALUES ('Cadastro 05', 1);

-- Realizado o Backup da base TestDB, FULL e Salvo no disco C:
BACKUP DATABASE [TestDB]
TO  DISK = N'C:\TestDB_Backup_FULL.bak'
WITH DESCRIPTION = N'Backup_FULL', NOFORMAT, NOINIT,
NAME = N'TestDB-Completo Banco de Dados Backup',
SKIP, NOREWIND, NOUNLOAD,  STATS = 5
GO

--Inserindo mais registros na tabela Produto
INSERT INTO dbo.Produto (nm_prod, id_cat_prod) VALUES ('Cadastro 06', 1);
INSERT INTO dbo.Produto (nm_prod, id_cat_prod) VALUES ('Cadastro 07', 1);
INSERT INTO dbo.Produto (nm_prod, id_cat_prod) VALUES ('Cadastro 08', 1);

-- Realizado Backup de Log após as inserções de Novos registros anteriormente
BACKUP LOG [TestDB]
TO  DISK = N'C:\SQL2019\TestDB_Backup_LOG.bak'
WITH  DESCRIPTION = N'Backup_LOG', NOFORMAT, NOINIT,
NAME = N'TestDB-Completo Banco de Dados Backup',
SKIP, NOREWIND, NOUNLOAD,  STATS = 5
GO

--Agora o Banco TestDB será Excluído, Restaurado o Full como NORECOVERY e Após Restaurado o Backup de LOG
DROP DATABASE [TestDB]
GO

--Banco de Dados Restaurado como NORECOVERY
USE [master]
RESTORE DATABASE
[TestDB] FROM  DISK = N'C:\SQL2019\TestDB_Backup_FULL.bak'
WITH  FILE = 1,  NORECOVERY,  NOUNLOAD,  STATS = 5
GO

-- Restaurado o arquivo de Backup de LOG e liberado a base para Leitura
RESTORE LOG [TestDB]
FROM  DISK = N'C:\SQL2019\TestDB_Backup_LOG.bak'
WITH  FILE = 1,  NOUNLOAD,  STATS = 10
GO

-- MUDA O BANCO PARA O MODO NORECOVERY para - RECOVERY
RESTORE DATABASE TESTDB WITH RECOVERY

--###################################################################################################
--Esta parte SIMULA a Realização de um Backup FULL, em seguida um de LOG e por Último um Backup DIFERENCIAL
--Eles podem ser restaurados em sua devida ordem, FULL, LOG e DIFF
-- Ou apenas o FULL e por último do DIFF, que contém todas as informações desde o último Backup Full Realizado

--Passo 1
--Realizando 1 Backup FULL da base TestDB
USE MASTER
GO
BACKUP DATABASE [TestDB]
TO  DISK = N'C:\SQL2019\TestDB_Backup_FULL.bak'
WITH DESCRIPTION = N'Backup_FULL', NOFORMAT, NOINIT,
NAME = N'TestDB-Completo Banco de Dados Backup',
SKIP, NOREWIND, NOUNLOAD,  STATS = 5
GO

--Passo 2
--Criando tabela TESTE
USE TestDB
CREATE TABLE TESTE (
	ID INT IDENTITY(1,1)PRIMARY KEY,
	CARGA VARCHAR (50),	
)ON [PRIMARY]
GO

--Passo 3
--Inserindo carga de Registros
INSERT INTO TESTE VALUES ('CARGA_DADOS_01')
GO 1000

--Passo 4
--Verificando registros
SELECT COUNT(*) FROM TESTE;

--Passo 5
--Criando Backup de LOG 01
BACKUP LOG [TestDB]
TO  DISK = N'C:\SQL2019\TestDB_Backup_LOG_01.bak'
WITH  DESCRIPTION = N'Backup_LOG', NOFORMAT, NOINIT,
NAME = N'TestDB-Completo Banco de Dados Backup',
SKIP, NOREWIND, NOUNLOAD,  STATS = 5
GO

--Passo 6
--Inserindo carga de Registros
INSERT INTO TESTE VALUES ('CARGA_DADOS_02')
GO 1000
 
--Passo 7
----Criando Backup de LOG 02
BACKUP LOG [TestDB]
TO  DISK = N'C:\SQL2019\TestDB_Backup_LOG_02.bak'
WITH  DESCRIPTION = N'Backup_LOG', NOFORMAT, NOINIT,
NAME = N'TestDB-Completo Banco de Dados Backup',
SKIP, NOREWIND, NOUNLOAD,  STATS = 5
GO
 
--Passo 8
--Inserindo carga de Registros
INSERT INTO TESTE VALUES ('CARGA_DADOS_03')
GO 1000
 
--Passo 9
----Criando Backup DIFFERENTIAL
BACKUP DATABASE [TestDB]
TO  DISK = N'C:\SQL2019\Backup_DIFF.bak'
WITH  DIFFERENTIAL ,  DESCRIPTION = N'Backup_DIFF', NOFORMAT, NOINIT,
NAME = N'TestDB-Completo Banco de Dados Backup',
SKIP, NOREWIND, NOUNLOAD,  STATS = 5
GO

--Passo 10
--Verificando
SELECT COUNT(*), CARGA FROM TESTE
GROUP BY CARGA;
 
 
--Passo 11
--Excluído Banco de Dados TestDB
DROP DATABASE [TestDB];
GO

--Passo 12
-- Verifica diversas informações do arquivo de Backup FULL, LOG, DIFF
--Verifica as marcas de LSN do segundo Backup FULL / números de sequência de log = LSN
RESTORE HEADERONLY FROM DISK = 'C:\SQL2019\TestDB_Backup_FULL.bak'
RESTORE HEADERONLY FROM DISK = 'C:\SQL2019\TestDB_Backup_LOG_01.bak'
RESTORE HEADERONLY FROM DISK = 'C:\SQL2019\TestDB_Backup_LOG_02.bak'
RESTORE HEADERONLY FROM DISK = 'C:\SQL2019\Backup_DIFF.bak'

--Passo 13
--Restaurando o arquivo Backup FULL, e deixando a base NORECOVERY
USE [master]
RESTORE DATABASE [TestDB]
FROM  DISK = N'C:\SQL2019\TestDB_Backup_FULL.bak'
WITH  FILE = 1,  NORECOVERY,  NOUNLOAD,  STATS = 5
GO

--PASSO 14
--Restaurando o Arquivo de Backup DIFF, não tendo necessidade de restaurar os dois anteriores de LOG
-- Visto que o DIFF contêm todas as informações desde o Backup FULL
RESTORE DATABASE TestDB
FROM DISK='C:\SQL2019\Backup_DIFF.bak' 
WITH  NORECOVERY,REPLACE, STATS;

--Passo 15
--Libera a base com Recovery, pronta para uso
USE MASTER
GO
RESTORE DATABASE TestDB WITH RECOVERY;

--Passo 16
--Verificando dados
USE TestDB
SELECT COUNT(*), CARGA FROM TESTE
GROUP BY CARGA;

