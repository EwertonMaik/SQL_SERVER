--Grupo de comandos DCL
GRANT / REVOKE / DENY

-- O nivél de segurança do Sql Server divide-se em:
1 - Servidor / instãncia
    (LOGINS - Podem ser Autenticação (WINDOWS) ou (SQL SERVER E WINDOWS))
2 - Banco de Dados
    (USERS)
3 - Objetos
    (SCHEMAS, ROLES - (SERVER ou DATABASE), PERMISSÕES (DCL))


--Comando para mudar o proprietário OWNER do Banco de Dados
ALTER AUTHORIZATION ON DATABASE::NOME_BANCO TO NOME_LOGIN;

--Aplicado para o logon SA ser o proprietário do banco TestDB
USE [TestDB]
GO
ALTER AUTHORIZATION ON DATABASE::[TestDB] TO [sa];
GO

--##################################################################
--Criado um Logon user_01 de Servidor, onde seu banco padrão é o TestDB e não tem habilitado expiração de senha e verificação de politicas
-- Esse logon não recebeu também nenhum acessso a Role de Servidor, apenas de banco logo mais abaixo.
-- Esse LOGON é de apenas Autenticação apenas do SQL SERVER
USE [master]
GO
CREATE LOGIN [user_01] WITH PASSWORD=N'123456789', DEFAULT_DATABASE=[TestDB], CHECK_EXPIRATION=OFF, CHECK_POLICY=OFF
GO

-- Criado o User user_01 para a base TestDB e relacionado ao Logon user_01
USE [TestDB]
GO
CREATE USER [user_01] FOR LOGIN [user_01]
GO

-- O User - user_01 terá acesso apenas aos objetos do esquema  dbo
USE [TestDB]
GO
ALTER USER [user_01] WITH DEFAULT_SCHEMA=[dbo]
GO

-- O user user_01 fora adicionado a role de Database db_datareader e db_datawriter
-- Onde é permidito apenas ler, inserir, atualizar e excluír registros das tabelas que tem acesso
USE [TestDB]
GO
ALTER ROLE [db_datareader] ADD MEMBER [user_01]
GO
USE [TestDB]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [user_01]
GO

--##################################################################
-- Criando um LOGOn que autentique via SQL SERVER
-- Logon user_02, autenticação via windows e banco de dados padrão TestDB
USE [master]
GO
CREATE LOGIN [user_02] FROM WINDOWS WITH DEFAULT_DATABASE=[TestDB]
GO

-- Adicionado este Logon user_02 a role de Servidor dbcreator
-- Onde pode criar Base de Dados, e será automaticamente proprietáro delas
ALTER SERVER ROLE [dbcreator] ADD MEMBER [user_02]
GO

-- Aplicando GRANT
-- Liberado para o user user_01 permissão de Select, Update, Insert e Delete na tabela dbo.Produto;
GRANT SELECT ON dbo.Produto TO user_01;
GRANT UPDATE ON dbo.Produto TO user_01;
GRANT INSERT ON dbo.Produto TO user_01;
GRANT DELETE ON dbo.Produto TO user_01;
GRANT SELECT, UPDATE, INSERT, DELETE ON dbo.Produto TO user_01; -- O comando pode ser aplicado em uma única instrução

--Esse é um GRANT mais Generico, não liberado apenas para um objeto como o GRANT anterior
--Com esta permissão,, o user_01 pode selecionar, atualizar, inserir ou deletar qualquer objeto da base
GRANT SELECT TO user_01;
GRANT UPDATE TO user_01;
GRANT INSERT TO user_01;
GRANT DELETE TO user_01;
GRANT INSERT, UPDATE, SELECT, DELETE TO user_01; -- O comando pode ser aplicado em uma única instrução

-- Removido todas as permissões das operações aplicadas no GRANT anterior
REVOKE SELECT ON dbo.Produto TO user_01;
REVOKE UPDATE ON dbo.Produto TO user_01;
REVOKE INSERT ON dbo.Produto TO user_01;
REVOKE DELETE ON dbo.Produto TO user_01;

--Aplicado um GRANT de select na tabela dbo.Produto, onde o user_01 só pode selecionar os campos id_prod, nm_prod
GRANT SELECT ON dbo.Produto(id_prod, nm_prod) TO user_01;

-- Aplicado um GRANT de SELECT no ESQUEMA dbo para user_01
--Agora o user_01 pode selecionar todas os objetos do ESQUEMA dbo
--Aplicado GRANT para outras operações nos objetos do Esquema dbo
GRANT SELECT ON SCHEMA :: dbo TO user_01;
GRANT UPDATE ON SCHEMA :: dbo TO user_01;
GRANT DELETE ON SCHEMA :: dbo TO user_01;
GRANT INSERT ON SCHEMA :: dbo TO user_01;

-- GRANT para o user_01 poder criar tabelas, views, procedure, function, 
GRANT CREATE TABLE TO user_01;
GRANT CREATE VIEW TO user_01;
GRANT CREATE PROCEDURE TO user_01;
GRANT CREATE FUNCTION TO user_01;

-- Grant com varios permissões embutidas no comando
GRANT
       ALTER,
       ALTER ANY ASSEMBLY,
       AUTHENTICATE,
       CONNECT,
       CREATE AGGREGATE,
       CREATE ASSEMBLY,
       CREATE DEFAULT,
       CREATE FUNCTION,
       CREATE PROCEDURE,
       CREATE SYNONYM,
       CREATE TABLE,
       CREATE VIEW,
       DELETE,
       EXECUTE,
       INSERT,
       REFERENCES,
       SELECT,
       SHOWPLAN,
       UPDATE,
       VIEW DATABASE STATE,
       VIEW DEFINITION
TO user_01;
GO

-- Revoke com varios permissões embutidas no comando
REVOKE
       ALTER,
       ALTER ANY ASSEMBLY,
       AUTHENTICATE,
       CONNECT,
       CREATE AGGREGATE,
       CREATE ASSEMBLY,
       CREATE DEFAULT,
       CREATE FUNCTION,
       CREATE PROCEDURE,
       CREATE SYNONYM,
       CREATE TABLE,
       CREATE VIEW,
       DELETE,
       EXECUTE,
       INSERT,
       REFERENCES,
       SELECT,
       SHOWPLAN,
       UPDATE,
       VIEW DATABASE STATE,
       VIEW DEFINITION
FROM user_01;
GO

-- Removido a opção de GRANT OPTION para SELECT na tabela dbo.Produto do usuário user_01
--Ele não poderá mais aplicar permissão de select para outros usuários para esta tabela
--Com a opção cascade, foi removido o acesso de select dos usuários que o user_01 chegou de liberar
REVOKE GRANT OPTION FOR SELECT ON dbo.Produto FROM user_01 CASCADE;

--Na primeira instrução é negado o acesso de select para a tabela dbo.Produto para o user_01
--Na segunda instrução é negado o select para user_01, não podendo selecionar nenhuma tabela
DENY SELECT ON dbo.Produto TO user_01;
DENY SELECT TO user_01;

-- Deny com varios permissões embutidas no comando
DENY
       ALTER,
       ALTER ANY ASSEMBLY,
       AUTHENTICATE,
       CONNECT,
       CREATE AGGREGATE,
       CREATE ASSEMBLY,
       CREATE DEFAULT,
       CREATE FUNCTION,
       CREATE PROCEDURE,
       CREATE SYNONYM,
       CREATE TABLE,
       CREATE VIEW,
       DELETE,
       EXECUTE,
       INSERT,
       REFERENCES,
       SELECT,
       SHOWPLAN,
       UPDATE,
       VIEW DATABASE STATE,
       VIEW DEFINITION
TO USR_MINI_CRM;
GO
